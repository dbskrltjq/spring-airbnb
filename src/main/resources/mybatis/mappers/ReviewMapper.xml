<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.airbnb.mapper.ReviewMapper">

	<resultMap type="Review" id="reviewResultMap">
		<id column="REVIEW_NO" property="no" />
		<result column="ACC_NO" property="accNo"/>
		<result column="USER_TYPE" property="userType"/>
		<result column="REVIEW_CONTENT" property="content"/>
		<result column="REVIEW_CREATED_DATE" property="createdDate"/>
		<result column="REVIEW_UPDATED_DATE" property="updatedDate"/>
		<result column="PRIVATE_NOTE" property="privateNote"/>
		<result column="REVIEW_REPLY" property="reviewReply"/>
		<result column="POSITIVE_FEEDBACK" property="positiveFeedback"/>
		<result column="NAGATIVE_FEEDBACK" property="nagativeFeedback"/>
		<result column="WANT_MEET_AGAIN" property="wantMeetAgain"/>
		<result column="REVIEW_DELETED" property="deleted"/>
		<result column="RESERVATION_NO" property="reservationNo"/>
		<association property="user" column="USER_NO" select="kr.co.airbnb.mapper.UserMapper.getUserByNo"/>
		<association property="accommodation" column="ACC_NO" select="kr.co.airbnb.mapper.AccommodationMapper.getAcc"/>
	</resultMap>
	
	<!-- List<Review> getReviews(@Param("accNo") int accNo, int beginIndex, int endIndex, @Param("keyword") String keyword); -->
	<select id="getReviews"  resultMap="reviewResultMap">
		select *
		from (select ROW_NUMBER() OVER (ORDER BY REVIEW_CREATED_DATE desc) row_number, 
		      REVIEW_NO, ACC_NO, USER_NO, REVIEW_CONTENT, REVIEW_CREATED_DATE, TOTAL_SCORE, CLEANLINESS_SCORE, ACCURACY_SCORE, COMMUNICATION_SCORE,
		      LOCATION_SCORE, CHECKIN_SCORE, VALUE_SCORE, OBSERVANCE_SCORE, PRIVATE_NOTE, REVIEW_REPLY, POSITIVE_FEEDBACK, NAGATIVE_FEEDBACK,
		      WANT_MEET_AGAIN, CONVENIENCE_SCORE, REVIEW_UPDATED_DATE, REVIEW_DELETED, USER_TYPE, RESERVATION_NO
		      from AIRBNB_REVIEWS 
		      where USER_TYPE = 'guest'
		      and acc_no = #{accNo}
		      <if test="keyword != null">
		      	and review_content like '%' || #{keyword} || '%'
		      </if>)
		where row_number &gt;= #{beginIndex} and row_number &lt;= #{endIndex}
			  and USER_TYPE = 'guest'
	</select>

	<!-- void insertReview(Review review); -->
	<!-- 리뷰 갯수 올라갈 때마다 ACCOMMODATIONS의 리뷰 갯수가 올라가게 해야 한다. -->
	<insert id="insertReviewGuest" parameterType="kr.co.airbnb.vo.Review">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select reviews_seq.nextval
			from dual
		</selectKey>
		insert into airbnb_reviews 
		(review_no, acc_no, user_no, review_content, total_score, cleanliness_score, accuracy_score, communication_score, location_score, 
		checkin_score, value_score, convenience_score, positive_feedback, nagative_feedback, want_meet_again, user_type, reservation_no)
		values 
		(#{no}, #{accNo}, #{user.no}, #{content}, #{totalScore}, #{cleanScore}, #{accuracyScore}, #{communicationScore}, #{locationScore}, 
		#{checkinScore}, #{valueScore}, #{convenienceScore}, #{positiveFeedback}, #{nagativeFeedback}, #{wantMeetAgain}, #{userType}, #{reservationNo})
	</insert>
	
	<!-- void insertReview(Review review); -->
	<insert id="insertReviewHost" parameterType="Review">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select reviews_seq.nextval
			from dual
		</selectKey>
		insert into airbnb_reviews 
		(review_no, acc_no, user_no, review_content, total_score, cleanliness_score, communication_score, observance_score, private_note, want_meet_again, user_type, reservation_no)
		values 
		(#{no}, #{accNo}, #{user.no}, #{content}, #{totalScore}, #{cleanScore}, #{communicationScore}, #{observanceScore}, #{privateNote}, #{wantMeetAgain}, #{userType}, #{reservationNo})
	</insert>
	
	<resultMap type="kr.co.airbnb.vo.GuestRequest" id="GuestRequestResultMap">
		<id column="RESERVATION_NO" property="reservationNo" />
		<result column="CHECK_IN_DATE" property="checkIn" />
		<result column="CHECK_OUT_DATE" property="checkOut" />
		<result column="ACC_REVIEW_COUNT" property="reviewCount" />
		<result column="ACC_NAME" property="accName" />
		<result column="ACC_ADDRESS" property="address" />
		<result column="IMAGE_COVER" property="imageCover" />
		<result column="USER_NAME" property="guestName" />
	</resultMap>
	
	<resultMap type="kr.co.airbnb.vo.HostRequest" id="HostRequestResultMap">
		<id column="RESERVATION_NO" property="reservationNo" />
		<result column="CHECK_IN_DATE" property="checkIn" />
		<result column="CHECK_OUT_DATE" property="checkOut" />
		<result column="ACC_REVIEW_COUNT" property="reviewCount" />
		<result column="ACC_NAME" property="accName" />
		<result column="ACC_ADDRESS" property="address" />
		<result column="IMAGE_COVER" property="imageCover" />
		<result column="USER_NAME" property="hostName" />
	</resultMap>
	
	<!-- GuestRequest getHostInfoByReservationNo(int reservationNo); -->
	<select id="getHostInfoByReservationNo" parameterType="int" resultMap="HostRequestResultMap">
		select 
			R.CHECK_IN_DATE, R.CHECK_OUT_DATE, R.RESERVATION_NO,
		    A.ACC_REVIEW_COUNT, A.ACC_NAME, A.ACC_ADDRESS, A.IMAGE_COVER,
		    U.USER_NAME
		from 
			AIRBNB_RESERVATIONS R, AIRBNB_ACCOMMODATIONS A, AIRBNB_USERS U
		where
		        A.ACC_NO = R.ACC_NO
		    AND A.USER_NO = U.USER_NO
		    AND R.RESERVATION_NO = #{reservationNo}
	</select>
		
	<!-- HostRequest getGuestInfoByReservationNo(int reservationNo); -->
	<select id="getGuestInfoByReservationNo" parameterType="int" resultMap="GuestRequestResultMap">
		select 
			R.CHECK_IN_DATE, R.CHECK_OUT_DATE, 
		    A.ACC_REVIEW_COUNT, A.ACC_NAME, A.ACC_ADDRESS, A.IMAGE_COVER,
		    U.USER_NAME
		from 
			AIRBNB_RESERVATIONS R, AIRBNB_ACCOMMODATIONS A, AIRBNB_USERS U
		where
		        A.ACC_NO = R.ACC_NO
		    AND R.USER_NO = U.USER_NO
		    AND R.RESERVATION_NO =#{reservationNo}
	</select>
	
	<!-- getDuplicateReviewByNo -->
	<select id="getDuplicateReviewByNo" resultType="integer">
		select RESERVATION_NO
		from   AIRBNB_REVIEWS 
		where  RESERVATION_NO = #{reservationNo} AND USER_NO = #{userNo}
	</select>
	
	<!-- getOverdueReviewByNo -->
	<select id="getOverdueReviewByNo" resultType="integer">
		select *
		from   AIRBNB_RESERVATIONS
		where  CHECK_OUT_DATE > SYSDATE - 14
        and    RESERVATION_NO = #{reservationNo} AND USER_NO = #{userNo}
	</select>
	
	<!-- Map<String, Object> getGuestReceivedReviews(int no); 
		게스트가 받은 리뷰이다. (호스트가 적어준 리뷰 조회)	-->
	<select id="getGuestReceivedReviews" parameterType="int" resultMap="reviewResultMap">
		select  R.REVIEW_NO, R.USER_NO, R.REVIEW_CONTENT, R.REVIEW_CREATED_DATE, A.ACC_NO, R.PRIVATE_NOTE, R.USER_TYPE, R.REVIEW_DELETED
		from AIRBNB_USERS U, AIRBNB_REVIEWS R, AIRBNB_RESERVATIONS V, AIRBNB_ACCOMMODATIONS A
		where U.USER_NO = #{value}                       
		    AND U.USER_NO = V.USER_NO                  
		    AND V.RESERVATION_NO = R.RESERVATION_NO    
		    AND V.ACC_NO = A.ACC_NO                     
		    AND A.USER_NO = R.USER_NO                                 
		    AND R.USER_TYPE = 'host'                   
		order by R.REVIEW_CREATED_DATE DESC
	</select>
	
	<!-- Map<String, Object> getGuestWritedReviews(int no); 
		호스트가 받은 리뷰이다. (게스트가 적어준 리뷰 조회)	-->
	<select id="getGuestWritedReviews" parameterType="int" resultMap="reviewResultMap">
		select A.ACC_NAME, A.IMAGE_COVER, R.REVIEW_CREATED_DATE, R.REVIEW_CONTENT, R.USER_TYPE, R.POSITIVE_FEEDBACK, R.NAGATIVE_FEEDBACK,
			   U.USER_PROFILE_IMAGE, U.USER_NAME, U.USER_ADDRESS, U.USER_CREATED_DATE, R.USER_NO, A.ACC_NO, A.ACC_REVIEW_COUNT, R.REVIEW_DELETED
		from AIRBNB_ACCOMMODATIONS A, AIRBNB_USERS U, AIRBNB_REVIEWS R, AIRBNB_RESERVATIONS V
		where U.USER_NO = #{value}     
		    AND A.USER_NO = U.USER_NO
		    AND A.ACC_NO = R.ACC_NO
		    AND V.RESERVATION_NO = R.RESERVATION_NO
		    AND R.USER_TYPE = 'guest'
		order by R.REVIEW_CREATED_DATE DESC
	</select>
	 
	<!-- Map<String, Object> getHostWriteReviews(int no); 
		호스트가 받은 리뷰이다. (호스트가 적어준 리뷰 조회)	-->
	<select id="getHostWriteReviews" parameterType="int" resultMap="reviewResultMap">
		select R.REVIEW_NO, R.USER_NO, R.REVIEW_CONTENT, R.REVIEW_CREATED_DATE, R.ACC_NO, R.USER_NO, A.ACC_NO, R.PRIVATE_NOTE, U.USER_REVIEW_COUNT
		from AIRBNB_USERS U, AIRBNB_REVIEWS R, AIRBNB_RESERVATIONS V, AIRBNB_ACCOMMODATIONS A
		where U.USER_NO = #{value}                            
		    AND U.USER_NO = V.USER_NO                  
		    AND V.RESERVATION_NO = R.RESERVATION_NO    
		    AND V.ACC_NO = A.ACC_NO                     
		    AND A.USER_NO = R.USER_NO                                 
		    AND R.USER_TYPE = 'host'                   
		order by R.REVIEW_CREATED_DATE DESC
	</select>
	
	<!-- List<Review> getSentHostReviews(int no); -->
	<select id="getSentHostReviews" parameterType="int" resultMap="reviewResultMap">
		select U.USER_NO, U.USER_NAME, U.USER_PROFILE_IMAGE, U.USER_CREATED_DATE, R.*
		from AIRBNB_USERS U, AIRBNB_REVIEWS R, AIRBNB_RESERVATIONS V
		where r.user_no = #{value}     
		    and r.user_type = 'host'
		    and r.reservation_no = v.reservation_no
		    and v.user_no = u .user_no
	    order by R.REVIEW_CREATED_DATE DESC
	</select>
	
	<!-- List<Review> getSentGuestReviews(int no); -->
	<select id="getSentGuestReviews" parameterType="int" resultMap="reviewResultMap">
		select *
		from AIRBNB_REVIEWS
		where user_no = #{value}     
			and user_type = 'guest'
		order by REVIEW_CREATED_DATE DESC
	</select>
	
	<!-- List<Review> getReviewsToWrite(int no); -->
	<select id="getReviewsToWrite" parameterType="int" resultMap="reviewResultMap">
		select *
		from airbnb_reservations X, airbnb_accommodations Y, airbnb_users Z
		where X.acc_no = Y.acc_no
			and X.user_no = z.user_no
			and X.reservation_no in (select A.reservation_no
		                            from airbnb_reservations A
		                            where A.user_no = #{value} 
		                                and A.CHECK_OUT_DATE is not null 
		                                AND A.CHECK_OUT_DATE &lt;= to_date(to_char(sysdate, 'yyyy-mm-dd'))
		                                and A.CHECK_OUT_DATE + 14 >= to_date(to_char(sysdate, 'yyyy-mm-dd'
		                            ))
		                            and A.CHECK_IN_DATE + 1 &lt;= to_date(to_char(sysdate, 'yyyy-mm-dd'))
		                            minus
		                            select A.reservation_no
		                            from airbnb_reservations A, airbnb_reviews B
		                            where A.user_no = #{value}   
		                            and a.reservation_no = B.reservation_no
		                            and A.CHECK_OUT_DATE is not null and A.CHECK_OUT_DATE + 14 >= to_date(to_char(sysdate, 'yyyy-mm-dd')))
		order by X.RESERVATION_CREATED_DATE desc
	</select>
	
	<!-- Review getReviewByReviewNo(int no); -->
	<select id="getReviewByReviewNo" parameterType="int" resultMap="reviewResultMap">
		select *
		from airbnb_reviews
		where review_no = #{value}
	</select>
	
	<!-- void updateReview(Review review); -->
	<update id="updateReview" parameterType="kr.co.airbnb.vo.Review">
		update airbnb_reviews
		set 
			review_content = #{content},
			positive_feedback = #{positiveFeedback},
			nagative_feedback = #{nagativeFeedback},
			PRIVATE_NOTE = #{privateNote},
			review_updated_date = sysdate
		where review_no = #{no}
	</update>
	
	<!-- void deleteReview(Review review); -->
	<update id="deleteReview" parameterType="kr.co.airbnb.vo.Review">
		update airbnb_reviews
		set 
			REVIEW_DELETED = 'Y',
			review_updated_date = sysdate
		where review_no = #{no}
	</update>

</mapper>
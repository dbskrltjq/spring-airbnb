<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.airbnb.mapper.ReviewMapper">

	<!-- resultMap? -->
	<resultMap type="kr.co.airbnb.vo.Review" id="reviewResultMap">
		<id column="REVIEW_NO" property="no" />
		<result column="ACC_NO" property="accNo"/>
		<result column="USER_TYPE" property="userType"/>
		<result column="REVIEW_CONTENT" property="content"/>
		<result column="REVIEW_CREATED_DATE" property="createdDate"/>
		<result column="REVIEW_UPDATED_DATE" property="updatedDate"/>
		<result column="PRIVATE_NOTE" property="privateNote"/>
		<result column="REVIEW_REPLY" property="reviewReply"/>
		<result column="POSITIVE_FEEDBACK" property="positiveFeedback"/>
		<result column="NAGATIVE_FEEDBACK" property="nagativeFeedback"/>
		<result column="WANT_MEET_AGAIN" property="wantMeetAgain"/>
		<result column="REVIEW_DELETED" property="deleted"/>
		<result column="RESERVATION_NO" property="reservationNo"/>
		<association property="user" column="USER_NO" select="kr.co.airbnb.mapper.UserMapper.getUserByNo"/>
	</resultMap>
	
	<!-- List<Review> getReviews(@Param("accNo") int accNo); -->
	<select id="getReviews" parameterType="int" resultMap="reviewResultMap">
		select *
		from AIRBNB_REVIEWS
		order by REVIEW_CREATED_DATE asc
	</select>

	<!-- void insertReview(Review review); -->
	<!-- 리뷰 갯수 올라갈 때마다 ACCOMMODATIONS의 리뷰 갯수가 올라가게 해야 한다. -->
	<insert id="insertReviewGuest" parameterType="kr.co.airbnb.vo.Review">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select reviews_seq.nextval
			from dual
		</selectKey>
		insert into airbnb_reviews 
		(review_no, acc_no, user_no, review_content, total_score, cleanliness_score, accuracy_score, communication_score, location_score, 
		checkin_score, value_score, convenience_score, positive_feedback, nagative_feedback, want_meet_again, user_type, reservation_no)
		values 
		(#{no}, #{accNo}, #{user.no}, #{content}, #{totalScore}, #{cleanScore}, #{accuracyScore}, #{communicationScore}, #{locationScore}, 
		#{checkinScore}, #{valueScore}, #{convenienceScore}, #{positiveFeedback}, #{nagativeFeedback}, #{wantMeetAgain}, #{userType}, #{reservationNo})
	</insert>
	
	<!-- void insertReview(Review review); -->
	<insert id="insertReviewHost" parameterType="Review">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select reviews_seq.nextval
			from dual
		</selectKey>
		insert into airbnb_reviews 
		(review_no, acc_no, user_no, review_content, total_score, cleanliness_score, communication_score, observance_score, private_note, want_meet_again, user_type, reservation_no)
		values 
		(#{no}, #{accNo}, #{user.no}, #{content}, #{totalScore}, #{cleanScore}, #{communicationScore}, #{observanceScore}, #{privateNote}, #{wantMeetAgain}, #{userType}, #{reservationNo})
	</insert>
	
	<resultMap type="kr.co.airbnb.vo.GuestRequest" id="GuestRequestResultMap">
		<id column="RESERVATION_NO" property="reservationNo" />
		<result column="CHECK_IN_DATE" property="checkIn" />
		<result column="CHECK_OUT_DATE" property="checkOut" />
		<result column="ACC_REVIEW_COUNT" property="reviewCount" />
		<result column="ACC_NAME" property="accName" />
		<result column="ACC_ADDRESS" property="address" />
		<result column="IMAGE_COVER" property="imageCover" />
		<result column="USER_NAME" property="guestName" />
	</resultMap>
	
	<resultMap type="kr.co.airbnb.vo.HostRequest" id="HostRequestResultMap">
		<id column="RESERVATION_NO" property="reservationNo" />
		<result column="CHECK_IN_DATE" property="checkIn" />
		<result column="CHECK_OUT_DATE" property="checkOut" />
		<result column="ACC_REVIEW_COUNT" property="reviewCount" />
		<result column="ACC_NAME" property="accName" />
		<result column="ACC_ADDRESS" property="address" />
		<result column="IMAGE_COVER" property="imageCover" />
		<result column="USER_NAME" property="hostName" />
	</resultMap>
	
	<!-- GuestRequest getHostInfoByReservationNo(int reservationNo); -->
	<select id="getHostInfoByReservationNo" parameterType="int" resultMap="HostRequestResultMap">
		select 
			R.CHECK_IN_DATE, R.CHECK_OUT_DATE, R.RESERVATION_NO,
		    A.ACC_REVIEW_COUNT, A.ACC_NAME, A.ACC_ADDRESS, A.IMAGE_COVER,
		    U.USER_NAME
		from 
			AIRBNB_RESERVATIONS R, AIRBNB_ACCOMMODATIONS A, AIRBNB_USERS U
		where
		        A.ACC_NO = R.ACC_NO
		    AND A.USER_NO = U.USER_NO
		    AND R.RESERVATION_NO = #{reservationNo}
	</select>
		
	<!-- HostRequest getGuestInfoByReservationNo(int reservationNo); -->
	<select id="getGuestInfoByReservationNo" parameterType="int" resultMap="GuestRequestResultMap">
		select 
			R.CHECK_IN_DATE, R.CHECK_OUT_DATE, 
		    A.ACC_REVIEW_COUNT, A.ACC_NAME, A.ACC_ADDRESS, A.IMAGE_COVER,
		    U.USER_NAME
		from 
			AIRBNB_RESERVATIONS R, AIRBNB_ACCOMMODATIONS A, AIRBNB_USERS U
		where
		        A.ACC_NO = R.ACC_NO
		    AND R.USER_NO = U.USER_NO
		    AND R.RESERVATION_NO =#{reservationNo}
	</select>
	
	<!-- getDuplicateReviewByNo -->
	<select id="getDuplicateReviewByNo" resultType="integer">
		select RESERVATION_NO
		from   AIRBNB_REVIEWS 
		where  RESERVATION_NO = #{reservationNo} AND USER_NO = #{userNo}
	</select>
	
	<!-- getOverdueReviewByNo -->
	<select id="getOverdueReviewByNo" resultType="integer">
		select *
		from   AIRBNB_RESERVATIONS
		where  CHECK_OUT_DATE > SYSDATE - 14
        and    RESERVATION_NO = #{reservationNo} AND USER_NO = #{userNo}
	</select>
	
</mapper>